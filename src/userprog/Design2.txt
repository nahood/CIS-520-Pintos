		           +--------------------------+
       			   |         CIS 520          |
		           | PROJECT 2: USER PROGRAMS |
		           |     DESIGN DOCUMENT      |
		           +--------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Cale Povilonis / calepovilonis@ksu.edu
Derek Dinhphan / ddinh@ksu.edu
Nathanael Hood / nahood@ksu.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

Resources used:
https://github.com/gjserrano/proj2/
https://github.com/loganprough/pintos520
https://github.com/greasypenguins/CIS520-Group
https://github.com/jhauserw3241/Pintos-520-Proj2
https://static1.squarespace.com/static/5b18aa0955b02c1de94e4412/t/5b85fad2f950b7b16b7a2ed6/1535507195196/Pintos+Guide

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


static bool                                                                                         
 1 setup_stack (void **esp, const char *file_name)

Added additional file_name parameter to setup_stack function.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We modified the setup_stack function to also pass in the full filename including arguments. In order to arrange the elements of argv[] to be in the right order we reversed the string, tokenize the string, and reverse the string again before pushing it back onto the stack.

We avoid overflowing the stack page by copying only up to the PG_SIZE for a filename.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r is the re-entrant version of strtok. We pass in our own pointer to strtok_r which makes it more concurrency friendly.

>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

Security and customization. Security because it means we are shifty work from the kernel that can be done elsewhere, protecting the kernel from errors and kernel panics. Customization in that it extends the available things the user can do to customize their experience, such as shells allowing environment variables.


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


 struct list fd_list;

(syscall.c) A global list of sys_file for keeping track of open file descriptors. 

 struct lock file_lock;

(syscall.c) Ensures file synchronization when reading and writing. 

struct sys_file {
  int fd;                   // File descriptor
  struct file *f;           // Pointer to file
  struct list_elem elem;    // List element
  struct thread *owner;     // Thread that opened the file
};

(syscall.c) A list entry for keeping track of file descriptors. When a thread calls open() a new entry is created and inserted into the global list.

 struct thread {
    int fd;                  /* File descriptor counter */
    struct semaphore exited; /* Semaphore for parent waiting. */
    struct list children;    /* List for child processes 
    int exit_code;           /* Exit code for process */
};

(thread.c) Added a few members to thread struct. Fd is the counter for file descriptors. Semaphore is for notifying the parent. Children is for keeping track of child processes. Exit code is the status to return on exit.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

syscall.c keeps track of file descriptors and files by using a static global list of structs. The structs contain the file descriptor, owner thread, and pointer to the file. File descriptors are unique per process. When a thread calls open(), it increments its own file descriptor counter and inserts it into the global list containing other open fds. In order to get a file from the list we need both the fd and the thread that opened it.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

We first get the esp from the interrupt frame in the system call handler. We then made a function that validates pointers and exits if there are any problems. If they’re all valid then we simply dereference the pointer to read the user data. If there were any return values we modified the eax register of the interrupt frame.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

There is one pagedir_get_page call from getting the system call number and then at least another call to get the remaining arguments. The number of calls depends on the number of arguments passed. A system call that only copies 2 bytes of data still ends up having two page table inspections. The number of calls can be brought down to 1 if we directly access the system call number and only call pagedir_get_page for the args. 

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

Processes have a list of their children processes. Each child process has a semaphore that is used to notify the parent when it has exited. wait() calls process_wait which was modified to find the child in its children list and sema_down on a semaphore. When a process exits, it calls sema_up on its own semaphore to notify its parent.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We did the best that we could to validate the memory pointers. Checking if it was within the user virtual memory space and checking the page table if it has been allocated were the ways that we tried to validate it. If it failed any of our checks, it would call exit(-1). We modified exception.c to do the same thing as exit(-1) whenever an invalid access caused a page fault.

Whenever an error occurred, we made sure to either return the relevant information or call the exit() system call with an error status. We didn’t end up having to malloc any resources or buffers in our overall design so there were none that had to be freed.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

In process_execute, before creating the thread try to load the file and return the failed status early before even trying to create the thread. 

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

A semaphore is initialized to 0 on the child process when it is created. The parent process calls sema_down in the child process’s semaphore. Once the child process exits, it calls sema_up to notify the parent. If parent calls wait after the child has already exited then it should still work because the sema should still be available after exiting. If P terminates without waiting then it’s fine because C can still sema_up its own sema when it exits.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

It was simple and did the minimum it needed to be able to access and validate user provided pointers.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Having a single global list for file descriptors simplified the synchronization problem. Having unique file descriptors per process has the advantage of supporting more file descriptors than if we were to have a global counter for the entire OS.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We didn’t change the mapping.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

It was decently difficult. We ran into some issues that seemed to be more of bugs that prevented us from passing tests, rather than incorrect implementations. Debugging was probably the hardest part of the project. The two week extension of spring break as 1 day late helped a lot.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

The memory access part of the assignment gave us greater insight to the problems of security for OS design.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

The description on argument passing could be expanded more. It mentions process_execute and but doesn’t mention anything about the setup_stack function where most of the code happens.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

Our semester is a unique one in that classes got cancelled and moved to remote only due to a viral outbreak.

